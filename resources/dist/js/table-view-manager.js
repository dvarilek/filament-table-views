function u({defaultCollapsedGroups:a,isDeferredReorderable:s,isMultiGroupReorderable:t,isHighlightingReorderedRecords:d}){return{collapsedGroups:new Set(a),pendingReorderedRecords:new Map,activeReorderingGroup:null,isMultiGroupReorderingActive:!1,reorderedRecords:new Set,isLoading:!1,toggleCollapsedGroup(e){if(this.isGroupCollapsed(e)){this.collapsedGroups.delete(e);return}this.collapsedGroups.add(e)},isGroupCollapsed:function(e){return this.collapsedGroups.has(e)},isReorderingGroup(e=null){return t?this.isMultiGroupReorderingActive:this.activeReorderingGroup===e},isReorderingActive(){return t?this.isMultiGroupReorderingActive:this.activeReorderingGroup!==null},startReordering(e=null){if(!this.isLoading){if(t){this.isMultiGroupReorderingActive=!0;return}this.activeReorderingGroup=e}},stopReordering(e=null){if(t){this.isMultiGroupReorderingActive=!1;return}this.activeReorderingGroup=null},hasPendingReorderedRecords(e=null){return e?this.pendingReorderedRecords.has(e):this.pendingReorderedRecords.size>0},isRecordReordered(e){return this.reorderedRecords.has(e)},addToReorderedRecords(e){let r=e.item.getAttribute("x-sortable-item");r&&this.reorderedRecords.add(r)},async toggleReordering(e=null){if(!this.isLoading){if(this.isReorderingGroup(e)){s&&(t?await this.reorderMultipleGroups(this.pendingReorderedRecords):await this.reorderGroup(e,this.pendingReorderedRecords.get(e)),this.pendingReorderedRecords.clear(),d&&this.reorderedRecords.clear()),this.stopReordering(e);return}this.startReordering(e)}},async handleGroupReorder(e){if(e.oldIndex===e.newIndex)return;let r=new Set(e.target.sortable.toArray()),i=e.target.dataset.tableViewGroup;if(s){this.pendingReorderedRecords.set(i,r),d&&this.addToReorderedRecords(e);return}await this.reorderGroup(i,r)},async handleMultiGroupReorder(e){let r=e.from.dataset.tableViewGroup,i=e.to.dataset.tableViewGroup;if(e.oldIndex===e.newIndex&&r===i)return;let o=new Set(e.from.sortable.toArray()),n=new Set(e.to.sortable.toArray());if(s){this.pendingReorderedRecords.set(r,o),r!==i&&this.pendingReorderedRecords.set(i,new Set(n)),d&&this.addToReorderedRecords(e);return}await this.reorderMultipleGroups(new Map([[r,o],[i,n]]))},async reorderGroup(e,r){if(!(!r||!r.size)){this.isLoading=!0;try{await this.$wire.reorderTableViewsInGroup(e,[...r])}finally{this.isLoading=!1}}},async reorderMultipleGroups(e){if(!(!e||!e.size)){if(e.size===1){await this.reorderGroup(...e.entries().next().value);return}this.isLoading=!0;try{let r=Object.fromEntries([...e.entries()].map(([i,o])=>[i,[...o]]));await this.$wire.reorderTableViewsInGroups(r)}finally{this.isLoading=!1}}}}}export{u as default};
